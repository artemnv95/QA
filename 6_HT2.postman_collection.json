{
	"info": {
		"_postman_id": "1749522c-32db-4ddd-9055-59f197c831ea",
		"name": "HT2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверить, что в body приходит правильный string. (This is the first responce from server!) - String правильный!"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"console.log(jsonData);\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Name OK\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Artsiom\");\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Age OK\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"26\");\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Salary OK\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"//Спарсить request. (form-data)\r",
							"var reqData = request.data;\r",
							"console.log(reqData);\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name OK\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(reqData.name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age OK\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(reqData.age);\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary OK\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(1*reqData.salary);\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family);\r",
							"\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"5Salary ОК\", function () {\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(reqData.salary*4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Artsiom",
							"type": "default"
						},
						{
							"key": "age",
							"value": "26",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"console.log(jsonData);\r",
							"\r",
							"//Спарсить request.\r",
							"reqData = pm.request.url.query.toObject();\r",
							"console.log(reqData);\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"oi3_name OK\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(reqData.name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"oi3_age OK\", function (){\r",
							"    pm.expect(jsonData.age).to.eql(reqData.age);\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"oi3_salary OK\", function (){\r",
							"    pm.expect(jsonData.salary).to.eql(reqData.salary*1);\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family);\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"oi3_dogname OK\", function(){\r",
							"    pm.expect(jsonData.family.pets.dog).to.property(\"name\");\r",
							"});\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"oi3_dogage OK\", function(){\r",
							"    pm.expect(jsonData.family.pets.dog).to.property(\"age\");\r",
							"});\r",
							"\r",
							"//Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"oi3_checkLucky OK\", function(){\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.have.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"//Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"oi3_age4 OK\", function(){\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.have.eql(4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Artsiom&age=26&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Artsiom"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"console.log(jsonData);\r",
							"\r",
							"//Спарсить request.\r",
							"var reqData = pm.request.url.query.toObject();\r",
							"console.log(reqData);\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"oi4_name OK\", function(){\r",
							"    pm.expect(jsonData.name).to.eql(reqData.name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"oi4_age OK\", function(){\r",
							"    pm.expect(jsonData.age).to.eql(reqData.age*1);\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр salary из request.\r",
							"console.log(reqData.salary);\r",
							"\r",
							"//Вывести в консоль параметр salary из response.\r",
							"console.log(jsonData.salary);\r",
							"\r",
							"//Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(jsonData.salary[0]);\r",
							"\r",
							"//Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[1]);\r",
							"\r",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[2]);\r",
							"\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"oi4_salary0\", function(){\r",
							"    pm.expect(jsonData.salary[0]).to.eql(reqData.salary*1);\r",
							"});\r",
							"\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"oi4_salary1\", function(){\r",
							"    pm.expect(jsonData.salary[1]*1).to.eql(reqData.salary*2);\r",
							"});\r",
							"\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"oi4_salary3\", function(){\r",
							"    pm.expect(jsonData.salary[2]*1).to.eql(reqData.salary*3);\r",
							"});\r",
							"\r",
							"//Создать в окружении переменную name\r",
							"//ОК\r",
							"\r",
							"//Создать в окружении переменную age\r",
							"//ОК\r",
							"\r",
							"//Создать в окружении переменную salary\r",
							"//ОК\r",
							"\r",
							"//Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", \"Artsiom\");\r",
							"\r",
							"//Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", 26);\r",
							"\r",
							"//Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", 1000);\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"var art = jsonData.salary.length;\r",
							"var count = 1;\r",
							"for(var i of  jsonData.salary){\r",
							"    console.log(count, \"salary\", i)\r",
							"    count++\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Artsiom&age=26&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Artsiom"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Вставить параметр salary из окружения в request +\r",
							"//Вставить параметр age из окружения в age +\r",
							"//Вставить параметр name из окружения в name +\r",
							"//Отправить запрос. +\r",
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"console.log(jsonData);\r",
							"\r",
							"//Спарсить request.\r",
							"var reqData = request.data;\r",
							"console.log(reqData);\r",
							"\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Check_sqs OK\", function(){\r",
							"    pm.expect(jsonData).to.have.any.key(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Check_qasa6m OK\", function(){\r",
							"    pm.expect(jsonData).to.have.any.key(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Check_qasa12m OK\", function(){\r",
							"    pm.expect(jsonData).to.have.any.key(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Check_qasa1.5m OK\", function(){\r",
							"    pm.expect(jsonData).to.have.any.key(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Check_qasa3.5m OK\", function(){\r",
							"    pm.expect(jsonData).to.have.any.key(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр person\r",
							"pm.test(\"Check_person OK\", function(){\r",
							"    pm.expect(jsonData).to.have.any.key(\"person\");\r",
							"});\r",
							"\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check_start_qa_salary OK\", function(){\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(reqData.salary*1);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check_qa_salary_after_6_months OK\", function(){\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(reqData.salary*2);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Check_qa_salary_after_12_months OK\", function(){\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(reqData.salary*2.7);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Check_qa_salary_after_1.5_year OK\", function(){\r",
							"    pm.expect(1*\"jsonData.qa_salary_after_1.5_year\").to.eql(\"reqData.salary\"*3.3);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Check_qa_salary_after_3.5_years OK\", function(){\r",
							"    pm.expect(1*\"jsonData.qa_salary_after_3.5_years\").to.eql(\"reqData.salary\"*3.8);\r",
							"});\r",
							"\r",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check_person OK\", function(){\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(1*reqData.salary);\r",
							"});\r",
							"\r",
							"//Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Check_u_age OK\", function(){\r",
							"    pm.expect(jsonData.person.u_age).to.eql(1*reqData.age);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Check_u_salary_5_years OK\", function(){\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(reqData.salary*4.2);\r",
							"});\r",
							"\r",
							"//***Написать цикл который выведет в консоль по порядку элементы списка из параметра person."
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}